#!/bin/sh
#
# run
#
# David Adams
# November 2015
# Generate a sample

HELP=
CLEAN=
FCLONLY=
while getopts hcf OPT; do
  case $OPT in
  h) HELP=true;;
  c) CLEAN=true;;
  f) FCLONLY=true;;
  esac
done
shift $(( OPTIND-1 ))
SAMGEN=$1
SAMDET=$2
SAMSIM=$3
SAMPLE=${SAMGEN}${SAMDET}${SAMSIM}

if [ -z "$SAMGEN" ]; then
  HELP=true
fi

if [ -n "$HELP" ]; then
  echo Usage: $0 [-c] [-d] SAMPLE
  echo    or: $0 [-c] [-d] GEN DET SIM
  echo "  The first uses SAMPLE.fcl to generate the event file."
  echo "  For the second, the sample name is GENDETSIM and the fcl is"
  echo "  constructed by merging fcl/DET.fcl, fcl/GEN.fcl and fcl/SIM.fcl."
  echo "  Option -c forces rerun"
  echo "  Option -f exits after generating fcl and (if needed) cleaning"
  exit 0
fi

echo Sample is $SAMPLE

# If three arguments are given, then combine them to get the
# sample name and fcl. If this is different from the existing
# fcl, then remove the old results.
if [ -n "$SAMDET" -a -n "$SAMSIM" ]; then
  FCLGEN=fcl/$SAMGEN.fcl
  FCLDET=fcl/$SAMDET.fcl
  FCLSIM=fcl/$SAMSIM.fcl
  # Create fcl file.
  rm -f ${SAMPLE}_event.root
  if [ ! -r $FCLGEN ]; then
    echo Unable to find generator fcl: $FCLGEN
    exit 1
  fi
  if [ ! -r $FCLDET ]; then
    echo Unable to find detector fcl: $FCLDET
    exit 1
  fi
  if [ ! -r $FCLSIM ]; then
    echo Unable to find simulation fcl: $FCLSIM
    exit 1
  fi
  cat $FCLDET $FCLGEN $FCLSIM > tmpSAMPLE.fcl
  USENEW=
  if [ ! -r $SAMPLE.fcl ]; then
    USENEW=true
  else if ! diff tmpSAMPLE.fcl $SAMPLE.fcl; then
    USENEW=true
  fi; fi
  if [ -n "$USENEW" ]; then
    mv tmpSAMPLE.fcl $SAMPLE.fcl
    echo Created fcl: $SAMPLE.fcl
    CLEAN=true
  else
    echo Keeping existing fcl: $SAMPLE.fcl
  fi
else
  if [ ! -r $SAMPLE.fcl ]; then
    echo Input fcl not found: $SAMPLE.fcl
    exit 1
  else
    echo Using existing fcl: $SAMPLE.fcl
  fi
fi

if [ -n "$CLEAN" ]; then
  echo Cleaning
  rm -f ${SAMPLE}_hist.root ${SAMPLE}_event.root ${SAMPLE}.log
  rm -f ${SAMPLE}perf.root ${SAMPLE}perf.log
fi

if [ -n "$FCLONLY" ]; then
  exit 0;
fi

# Generate event data.
if [ ! -r ${SAMPLE}_event.root ]; then
  rm -f ${SAMPLE}perf.root
  echo
  echo run: Generating event data.
  echo " Start: "`date`
  LOG=${SAMPLE}perf.log
  echo $COM >$LOG
  echo Start `date` >>$LOG
  COM="lar -n 5 -c ${SAMPLE}.fcl -T ${SAMPLE}_hist.root -o ${SAMPLE}_event.root"
  echo $COM >>$LOG
  echo Start: `date` >>$LOG
  $COM 2>&1 >> ${SAMPLE}.log
  STAT=$?
  echo Finish: `date` >>$LOG
  echo Finish: `date`
  if [ $STAT -ne 0 -o ! -r ${SAMPLE}_event.root ]; then
    echo run: Event generation failed.
    echo Log is ${SAMPLE}.log
    exit 1
  fi
  fcldump ${SAMPLE}.fcl 10 > ${SAMPLE}.fcldump
fi

# Generate histograms.
if [ ! -r ${SAMPLE}perf.root ]; then
  echo
  echo run: Generating histograms.
  echo " Start: "`date`
  FCL=fcl/perf35t.fcl
  COM="lar -c $FCL -s ${SAMPLE}_event.root -T ${SAMPLE}perf.root"
  LOG=${SAMPLE}perf.log
  echo $COM
  echo $COM >$LOG
  echo Start: `date` >>$LOG
  $COM 2>&1 >>$LOG
  STAT=$?
  echo Finish: `date` >>$LOG
  echo Finish: `date`
  if [ $STAT -ne 0 -o ! -r ${SAMPLE}perf.root ]; then
    echo run: Histogram generation failed.
    echo Log is ${SAMPLE}perf.log
    exit 1
  fi
fi
