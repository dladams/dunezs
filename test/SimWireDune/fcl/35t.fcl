# 35t.fcl
#
# David Adams
# January 2016
#
# Script to generate raw data with the 35-ton detector.
#
# Uses new simulation (SimWireDUNE) with low noise and new ZS.

#include "services_dune.fcl"
#include "singles_dune.fcl"
#include "largeantmodules_dune.fcl"
#include "detsimmodules_dune.fcl"

process_name: SinglesGen

services: @local::dune35t_simulation_services
services.TFileService: { fileName: "mu35t_hist.root" }
services.TimeTracker:       {}
services.RandomNumberGenerator: {} #ART native random number generator

#Start each new event with an empty event.
source:
{
  module_type: EmptyEvent
  timestampPlugin: { plugin_type: "GeneratedEventTimestamp" }
  maxEvents:   1           # Number of events to create
  firstRun:    1           # Run number to use for this file
  firstEvent:  1           # number of first event in the file
}

# Define and configure some modules to do work on each event.
# First modules are defined; they are scheduled later.
# Modules are grouped by type.
physics: {
 producers: {
   generator: @local::dune35t_singlep	  
   largeant:  @local::dune35t_largeant	  
   daq:       @local::dune_detsim       
   rns:       { module_type: "RandomNumberSaver" }
 }

  # Specify the modules (filters and producers) that modify the event. 
  produce: [generator, largeant, daq, rns] 
  trigger_paths: [produce] 

  # Specify the modules (analyzers and output streams) that do not modify the event. 
  # These all run simultaneously.
  ostream1:  [ out1 ]
  end_paths: [ostream1]

}

# Specify where the output goes.
# If you defined a filter in the physics block and put it in the trigger_paths,
# then you need to put a SelectEvents: {SelectEvents: [XXX]}
# entry in the corresponding output stream. XXX is the label of the filter module(s).
outputs: {
  out1: {
    module_type: RootOutput
    fileName:    "mu35tnew.root" #default file name, can override from command line with -o or --output
  }
}

physics.producers.generator.PadOutVectors: true          # So all arrays don't have to be the same size
physics.producers.generator.PDG:      [ 13]
physics.producers.generator.P0:       [4.0]    # Momentum [GeV]
physics.producers.generator.X0:       [100]    # cm; large TPC are (-1.5, 222.5)
physics.producers.generator.Z0:       [ 10]    # cm; 35t boundaries are (-2, 51, 103, 157)
physics.producers.generator.Theta0XZ: [  0]    # degrees

#services.LArG4Parameters.KeepEMShowerDaughters: true   # True to keep EM decays

# Define the random seeds with policy to make the sequences reproducible.
# Many of these are temporarily hardwired into the services while we
# wait for SeedService to be made available to services.
services.SeedService.policy:    "preDefinedSeed"       # So random number sequence is always the same
services.SeedService.generator: 1001
services.SeedService.largeant:  1003
# When SeedService allows seeds to be fetched in services, we can set those
# with simething like:
#services.SeedService.ExponentialChannelNoiseService:      1005
#services.SeedService.ExponentialChannelNoiseServiceIndex: 1011
#services.SeedService.ProvidedPedestalAdditionService:     1007
#services.StuckBitAdcDistortionService:                    1009

# DetSim services.
services.SimChannelExtractService: @local::scxgeneric
services.ChannelNoiseService:      @local::chnoiseold
services.IDetPedestalService:      @local::pedlegacy
services.PedestalAdditionService:  @local::padprovided
services.AdcSuppressService:       @local::zsonline
services.AdcCompressService:       @local::cmpreplace
services.AdcDistortService:        @local::stuckbits

# DetSim flags.
physics.producers.daq.NoiseOn:     true
physics.producers.daq.PedestalOn:  true
physics.producers.daq.SuppressOn:  true
physics.producers.daq.DistortOn:   false
