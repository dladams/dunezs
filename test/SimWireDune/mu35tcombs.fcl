# mu35told.fcl
#
# David Adams
# November 2015
#
# Script to generate reference raw data.
#
# Uses new simulation (SimWireDUNE) with low noise and new ZS.

#include "services_dune.fcl"
#include "singles_dune.fcl"
#include "largeantmodules_dune.fcl"
#include "new_detsimmodules_dune.fcl"

process_name: SinglesGen

services:
{
  # Load the service that manages root files for histograms.
  TFileService: { fileName: "mu35t_hist.root" }
  TimeTracker:       {}
  RandomNumberGenerator: {} #ART native random number generator
  user:         @local::dune35t_simulation_services
}

#Start each new event with an empty event.
source:
{
  module_type: EmptyEvent
  timestampPlugin: { plugin_type: "GeneratedEventTimestamp" }
  maxEvents:   1           # Number of events to create
  firstRun:    1           # Run number to use for this file
  firstEvent:  1           # number of first event in the file
}

# Define and configure some modules to do work on each event.
# First modules are defined; they are scheduled later.
# Modules are grouped by type.
physics: {
 producers: {
   generator: @local::dune35t_singlep	  
   largeant:  @local::dune35t_largeant	  
   daq:       @local::dune35tnew_simwire       
   rns:       { module_type: "RandomNumberSaver" }
 }

 #define the producer and filter modules for this path, order matters, 
 #filters reject all following items.  see lines starting physics.producers below
 simulate: [generator, largeant, daq, rns] 
# simulate: [ generator, largeant, daq, rns] 
 
 #define the output stream, there could be more than one if using filters 
 stream1:  [ out1 ]

 #trigger_paths is a keyword and contains the paths that modify the art::event, 
 #ie filters and producers
 trigger_paths: [simulate] 

 #end_paths is a keyword and contains the paths that do not modify the art::Event, 
 #ie analyzers and output streams.  these all run simultaneously
 end_paths:     [stream1]  
}

#block to define where the output goes.  if you defined a filter in the physics
#block and put it in the trigger_paths then you need to put a SelectEvents: {SelectEvents: [XXX]}
#entry in the output stream you want those to go to, where XXX is the label of the filter module(s)
outputs:
{
 out1:
 {
   module_type: RootOutput
   fileName:    "mu35told.root" #default file name, can override from command line with -o or --output
 }
}

physics.producers.generator.PadOutVectors: true          # So all arrays don't have to be the same size
physics.producers.generator.PDG:      [ 13]
physics.producers.generator.P0:       [4.0]    # Momentum [GeV]
physics.producers.generator.X0:       [100]    # cm; large TPC are (-1.5, 222.5)
physics.producers.generator.Z0:       [ 10]    # cm; 35t boundaries are (-2, 51, 103, 157)
physics.producers.generator.Theta0XZ: [  0]    # degrees

#services.user.LArG4Parameters.KeepEMShowerDaughters: true   # True to keep EM decays

services.user.SeedService.policy:    "preDefinedSeed"       # So random number sequence is always the same
services.user.SeedService.generator: 1001
services.user.SeedService.largeant:  1003
#services.user.SeedService.daq:       1005
services.user.SeedService.daq: {
  SimWireDUNENoise:    1005
  SimWireDUNEIndex:    1011
  SimWireDUNEPedestal: 1007
  SimWireDUNEStuck:    1009
}
#services.user.SeedService.SimWireDUNENoise:    1005
#services.user.SeedService.SimWireDUNEIndex:    1011
#services.user.SeedService.SimWireDUNEPedestal: 1007
#services.user.SeedService.SimWireDUNEStuck:    1009

# Specify the zero suppression service.
#services.user.ZeroSuppressBase: @local::zsnone
#services.user.ZeroSuppressBase: @local::zslegacy
services.user.ZeroSuppressBase: @local::zsonline

# Specify the SimChannel extraction service.
#services.user.SimChannelExtractServiceBase: @local::scxall
services.user.SimChannelExtractServiceBase: @local::scx35t

# Specify the compression service.
services.user.CompressReplaceService: { Zero: 0 }

# Specify the pedestal service.
services.user.IDetPedestalService: @local::pedfixed
services.user.PedestalAdditionService: @local::padprovided

# Specify the noise service.
services.user.ChannelNoiseServiceBase: @local::chnoiseold

# Specify the stuck bits service.
services.user.StuckBitsService: @local::stuckbits

#services.user.IDetPedestalService.DetPedestalRetrievalAlg.DefaultCollRms: 0.0
#services.user.IDetPedestalService.DetPedestalRetrievalAlg.DefaultIndRms:  0.0

physics.producers.daq.PedestalOn:  true
physics.producers.daq.NoiseOn:     true
physics.producers.daq.StuckBitsOn: false
